***** описание дополнительного функционала gui.dll ***

***** обозначения *****

panel - панель\окно, к которому приаттачиваем элемент управления
id -  уникальный идентификатор элемента управления
idx - индекс строки/стоблца в списке
caption - текст элемента управления
itm - ссылка на хендлер объекта(light userdata)
data - дополнительные произвольные данные(ссылка сохраняется в реестре Lua)
colorfore, colorback -- цвет в виде строки '#RRGGBB'

****** listbox ******

local listbox = gui.listbox(id, is_sorted)
panel:add(listbox, "top", 100)
listbox:insert(idx, "caption", data) -- вставка строки 'caption' в позицию idx
listbox:append("caption", data) -- вставка строки 'caption' в конец списка
listbox:select(idx) -- выделить строку списка
idx = listbox:select() -- получить индекс выделенной строки списка
listbox:remove(idx) -- удалить строку с индексом idx
size = listbox:count() -- количество строк в списке
listbox:clear() -- очистить список (data удаляется из реестра)
text = listbox:get_line_text(idx) -- получить текст строки с указанным индексом
data = listbox:get_line_data(idx)-- получить данные строки с указанным индексом

panel:on_command(function(fromId, state)
if fromId==idx then--[[
1 - clicked
2 - db clicked
4 - focused
5 - unfocused
]]
if state==2 then
	print("db clicked list on ",listbox:get_line_text(listbox:select()))
end
end
end)

***** listview *****

local list = gui.list([false] [, false]) -- MultiColumn = false, SingleSelect = true
list:set_list_colour(colorfore, colorback) -- set colors
list:clear() -- очистка списка
list:selected_count() -- количество выделенных строк
list:add_item(text, data)
list:add_item({text_column_1, ... ,text_column_k}, data) -- for MultiColumn
list:autosize( idx ) -- автоподстройки ширины столбца idx
idx = list:get_selected_item() -- номер выделенной строки
data = list:get_item_data( idx ) -- данные, привязанные к строке idx
list_ascii:on_double_click( function (row_idx, column_idx, text)
	-- list db click event
end)
list:on_key(function(key)
 -- key pressed when list focused
end)
list:context_menu {
	'item1_caption|item1_action',
	'item2_caption|item2_action',
	}
-- item_action - имя глобальной функции или IDM_* идентификатор события редактора

***** treeview *****

local tree = gui.tree([true]) -- haslines[true]
(editable not implemented yet)
tree:set_tree_colour(colorfore,colorback) -- set colors
panel:add(tree, 'top', 150) -- 'align_type', width
local itm = tree:add_item("item1", nil, 1) -- ("caption" [, parent_item = root][, icon_idx=-1][, sel_icon_idx=-1])

local imgcnt = tree:set_iconlib(["toolbar\\cool.dll"][, small_size = true]) -- возвращает количество загруженных иконок
tree:set_selected_item(itm) -- выделить item
tree:tree_item_get_text(itm) -- получить текст
-- установить обработчик веделения узла дерева
tree:on_select(function(sel_item)
-- 	print('selected item with text:', tree:tree_get_item_text(sel_item))
end)
-- установка контекстного меню для активной области дерева
function tree_test_menu() print('test menu for tree') end
tree:context_menu{"item1|tree_test_menu"}
tree:set_tree_editable(bool) -- разрешает изменять имена узлов дерева

***** button  *****

local btn = gui.button("caption", id)
panel:add(btn, "none")
btn:position(20, 20)
btn:size(50, 30)

-- установка обработки нажатия элемента управления id
panel:on_command(function(id)
end)

***** checkbox *****

local chbox = gui.checkbox("caption", id, true) -- text, id, autocheck
panel:add(chbox, "none")
chbox:position(140, 20)
state = chbox:check() -- получить состояние
chbox:check( state ) -- установить состояние

***** radiobutton *****

local rbtn = gui.radiobutton("caption", id, true) -- text, id, autoradiobutton
test_panel:add(rbtn, "none")
rbtn:position(100, 60)

***** label *****

local label = gui.label("caption", id)
test_panel:add(label, "none")
label:position(180, 60)

***** trackbar *****

--[[ опции стилей toolbar
#define TBS_AUTOTICKS           0x0001
#define TBS_VERT                0x0002
#define TBS_HORZ                0x0000
#define TBS_TOP                 0x0004
#define TBS_BOTTOM              0x0000
#define TBS_LEFT                0x0004
#define TBS_RIGHT               0x0000
#define TBS_BOTH                0x0008
#define TBS_NOTICKS             0x0010
#define TBS_ENABLESELRANGE      0x0020
#define TBS_FIXEDLENGTH         0x0040
#define TBS_NOTHUMB             0x0080
#define TBS_TOOLTIPS            0x0100
#define TBS_REVERSED            0x0200
]]
trbar = gui.trackbar(0x20 + 0x200, 77) -- style, id
test_panel:add(trbar, "none")
trbar:position(20, 90)
trbar:size(250, 20)

-- выделение требует указать стиль TBS_ENABLESELRANGE
-- установка выделения
trbar:select(30, 60)
-- снять выделение
trbar:sel_clear()
-- установить диапазон (по умолчанию 0 .. 100)
trbar:range(20, 80)
-- установка обработчика события прокрутки трекбара
panel:on_scroll( function(id, pos) print("scroll pos: " .. pos) end)

***** tabbar *****

tabs = gui.tabbar(parent [, miltiline = false])
(miltiline not implemented yet)
tabs:set_iconlib([[toolbar\cool.dll]]) -- загрузить иконки из файла, возвращает количество иконок
tab_n = tabs:add_tab("caption", child_panel [, icon_id =-1])
parent:client(tab_n) -- установка активной области панели child_panel, привязанной к tab_n.

***** combobox *****

local cbbox = gui.combobox( id )
panel:add(cbbox, "top") -- align 'top' or 'bottom'
cbbox:cb_append( 'text' [, data] ) -- добавить строку 'text' в конец списка
cbbox:cb_cb_insert( idx, 'text' [,data]  ) -- вставить строку 'text' в позицию idx
cbbox:cb_items_h(15) -- установить высоту элментов списка
cbbox:cb_setcursel( id ) -- выбрать текст строки по номеру
cbbox:cb_setcursel(-1) -- очистить текст
id = cbbox:cb_getcursel() -- номер выбранной строки
cbbox:get_text() -- получить выбранный текст
cbbox:cb_getdata() -- получить данные, связанные с текущим элементом
cbbox:cb_clear() -- очистить список
panel:on_command(function(id, state)
	if id==88 then -- combobox idx
		if state == 1 then
			-- update text event
		end
	end
end)

***** memo *****
